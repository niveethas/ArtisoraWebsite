@page "/imageViewMentor"
@using ArtisoraServer
@inject NotificationService notif
@inject NavigationManager nav
@inject DialogService dialog


<RadzenDialog />
<RadzenNotification />
<PageTitle>View Mentees' Work</PageTitle>
@if (allWorks != null){
    <div class="rz-m-10">
        <div class="rz-p-sm-12 rz-text-align-center">
            <RadzenDropDown @bind-Value=@selectedValue1 Data=@msIds Change="@viewDropdown" Style="width: 100%; max-width: 400px;" />
        </div>
        
        @if (showDropdown.Equals("True"))
        {
            <div class="rz-p-sm-12 rz-text-align-center">
                <RadzenDropDown @bind-Value=@selectedValue Data=@displayImageNames Change="@viewImage" Style="width: 100%; max-width: 400px;" />
            </div>
        }

        @if (showImage.Equals("True")){
            <RadzenRow class="rz-text-align-center" Gap="2rem" RowGap="1rem">
            <RadzenColumn Size="6" class="rz-shadow-5 rz-border-radius-6 rz-color-secondary-lighter rz-p-5">
               <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" Gap="20" class="rz-py-5">
                <RadzenImage Class="rz-border-radius-4 rz-m-6" Style=" width:300px;" Path="@selectedImagePath"></RadzenImage>
                        <RadzenTextArea @bind-Value=@newComment Cols="30" Rows="3" Placeholder="Add a new comment here..."></RadzenTextArea>
                    <RadzenButton Text="Add New Comment" Icon="add_circle_outline" ButtonStyle="ButtonStyle.Secondary" ButtonType="ButtonType.Submit" Click="() => addComment(newComment)" />
               </RadzenStack>
            </RadzenColumn>
            <RadzenColumn >
               <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" Gap="1" class="rz-py-5">
                   @if (allComments != null){
                        @foreach(var n in allComments){
                                <RadzenText TextStyle="TextStyle.Body1" class="rz-border-secondary-light rz-p-1 rz-mb-2">
                                @n.TextContent
                            </RadzenText>
                        }
                   }
               </RadzenStack>
            </RadzenColumn>
            </RadzenRow>
        }
    </div>
}


@code {
    [Inject]
    public ClientAPI? _api { get; set; }

   // public int currentUserID = 1;
    private int? currentUserID = CurrentUser._userid;
    public ICollection<Image> allWorks = new List<Image>();
    public ICollection<Mentorship> allMentorships = new List<Mentorship>();
    public string selectedValue = "Image names";
    public int selectedValue1 = 0;
    public string showImage = "False";
    public string showDropdown = "False";
    public string selectedImagePath = "";
    public List<string> displayImageNames = new List<string>();
    public List<int> imageIds = new List<int>();
    public List<int> mentorshipIds = new List<int>();
    public ICollection<Message> allComments = new List<Message>();
    public int selectedImageId;
    public int selectedMentorshipId;
    public string? newComment;
    public List<int> msIds = new List<int>();


    protected override async Task OnInitializedAsync(){
        try
        {
            //mentors are able to view their student's work by first filtering by their mentorships
            allMentorships = await _api.MentorshipsAsync(currentUserID);
            foreach(var x in allMentorships)
            {
                msIds.Add(x.MentorshipId);
            }
        }
        catch{
            var notifMsg = new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Warning", Detail = "You must be logged in to view work.", Duration = 4000 };
            notif.Notify(notifMsg);
            nav.NavigateTo("/");
        }
    }


    public async Task addComment(string inputComment)
    {
        try
        {
            MessageDTO newMessage = new MessageDTO
                {
                    ImageId = selectedImageId,
                    MentorshipId = selectedMentorshipId,
                    TextContent = inputComment
                };

            await _api.New5Async(newMessage);

            newComment = string.Empty;
            allComments = await _api.MessagesAsync(selectedImageId);
            //once the image is saved to the database the comments are reloaded so the display updates
        }
        catch
        {
            var notifMsg = new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Failed", Detail = "Comment not saved, please try again later.", Duration = 4000 };
            notif.Notify(notifMsg);
        }
    }

    public async Task viewDropdown(){
        //get the id of the selected mentorship and find all images saved to that mentorship
        var position = msIds.IndexOf(selectedValue1);
        selectedMentorshipId = msIds[position];
        allWorks = await _api.MentorshipidAsync(selectedMentorshipId);
        foreach (var x in allWorks)
        {
            var imageNametmp = x.ImageURL.Substring(12);
            displayImageNames.Add(imageNametmp);
            imageIds.Add(x.ImageId);
            mentorshipIds.Add(x.MentorshipId);
        }
        showDropdown = "True";
    }

    public async Task viewImage(){
        //view the image selected and it's associated comments.
        selectedImagePath = @"\WorkImages\" + selectedValue;
        var position = displayImageNames.IndexOf(selectedValue);
        selectedImageId = imageIds[position];
        selectedMentorshipId = mentorshipIds[position];
        try
        {
            allComments = await _api.MessagesAsync(selectedImageId);
        }
        catch{
            
        }
            showImage = "True";

        }
    
}
