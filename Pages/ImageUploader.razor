@page "/uploader"
@using ArtisoraServer
@inject NotificationService notif
@inject NavigationManager nav
<RadzenNotification />

<PageTitle>Upload Work</PageTitle>
<div class="container-fluid">
    <div class="row px-3">
        <div class="col-lg-6 offset-lg-3 p-3">
            <RadzenCard>
                <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center">
                    <RadzenText TextStyle="TextStyle.H4">Upload Your Work</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body1">Select an image to upload so your mentor can view your work.</RadzenText>
                    <RadzenUpload Auto="true" Error=@(args => uploadError(args)) Multiple="false" class="w-100" Url="https://localhost:7123/image/upload" Complete=@(args => uploadComplete(args)) />
                </RadzenStack>
                
            </RadzenCard>
        </div>
    </div>
</div>

@code {
    [Inject]
    public ClientAPI? _api { get; set; }
    Image imageUploaded = new Image();
    public string fileName;
    public long? fileSize;
    RadzenUpload upload;
    public int? currentUserid;
    public Mentorship response;
    public string filePath;

    //restricts page to users that have mentorships signed up 
    protected override async Task OnInitializedAsync()
    {
        currentUserid = CurrentUser._userid;
        try
        {
            response = await _api.MenteeidAsync(currentUserid);
        }catch{
            var notifMsg = new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Warning", Detail = "You must have a mentorship set up to upload work.", Duration = 4000 };
            notif.Notify(notifMsg);
            nav.NavigateTo("/");

        }

    }

    void uploadImages (){

        upload.Upload();
    }

    void uploadError(UploadErrorEventArgs args)
    {
        var notifMsg = new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Error", Detail = "File submission failed.", Duration = 4000 };
        notif.Notify(notifMsg);
    }

    async void uploadComplete(UploadCompleteEventArgs args){
        filePath = @"\WorkImages\" + args.RawResponse;
        await updateImageDb();
    }

    public async Task updateImageDb(){
        try{
            var tempImage = new ImageDTO {
                    MenteeId = response.MenteeId,
                    MentorshipId = response.MentorshipId,
                    ImageURL = filePath
            };
           await _api.New2Async(tempImage);
            var notifMsg = new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Uploaded!", Detail = "Your upload has been successfully saved!", Duration = 4000 };
            notif.Notify(notifMsg);
            nav.NavigateTo("/imageView");
        }catch (Exception e)
        {
            var notifMsg = new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = "File upload failed to save. Please try again.", Duration = 4000 };
            notif.Notify(notifMsg);
        }
    }
}
